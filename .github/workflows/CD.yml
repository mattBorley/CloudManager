name: CI/CD

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  source:
    runs-on: ubuntu-latest
    steps:
      # Checkout the code
      - name: Checkout code
        uses: actions/checkout@v4

      # Set up Node.js for linting the React frontend
      - name: Set up Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      # Install dependencies and run linting for React
      - name: Install dependencies and lint React
        run: |
          cd Frontend
          npm install
          npm run lint -- --ignore-pattern "build/**"

      # Set up Python for linting the FastAPI backend
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.13'

      - name: Install build tools
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential python3-dev

      # Install dependencies and run linting for FastAPI
      - name: Install dependencies and lint FastAPI
        run: |
          cd Backend
          pip install -r requirements.txt
          pylint .

  test:
    runs-on: ubuntu-latest
    needs: source
    steps:
      # Checkout the code
      - name: Checkout code
        uses: actions/checkout@v3

      # Run React frontend tests
      - name: Run React tests
        run: |
          cd Frontend
          npm install
          npm test -- --ci --silent --maxWorkers=1

      # Run FastAPI backend tests
      - name: Run FastAPI tests
        run: |
          cd Backend
          pip install -r requirements.txt
          pytest

  build:
    runs-on: ubuntu-latest
    needs: test
    steps:
      # Checkout the code
      - name: Checkout code
        uses: actions/checkout@v3

      # Log in to Docker Hub or another Docker registry
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Build and push Docker image for frontend
      - name: Build and push React frontend Docker image
        run: |
          cd Frontend
          docker build -t ${{ secrets.DOCKER_USERNAME }}/frontend:latest .
          docker push ${{ secrets.DOCKER_USERNAME }}/frontend:latest

      # Build and push Docker image for backend
      - name: Build and push FastAPI backend Docker image
        run: |
          cd Backend
          docker build -t ${{ secrets.DOCKER_USERNAME }}/backend:latest .
          docker push ${{ secrets.DOCKER_USERNAME }}/backend:latest

  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      #Checkout repo
      - name: Checkout repository
        uses: actions/checkout@v4

      #Set up the SSH private key from GitHub secrets
      - name: Set up SSH private key
        run: |
          mkdir -p ~/.ssh
          echo "$VMPRIVATEKEY" > ~/.ssh/id_rsa
          cat ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H 40.81.128.118 >> ~/.ssh/known_hosts

      #Deploying to VM using SSH
      - name: Deploy to VM
        run: |
          ssh -T -i ~/.ssh/id_rsa azureuser@40.81.128.118 << 'EOF'
            if ! command -v docker &> /dev/null
            then
              echo "Docker not found, installing Docker..."
              curl -fsSL https://get.docker.com -o get-docker.sh
              sudo sh get-docker.sh
              sudo usermod -aG docker azureuser
            fi
          
            if ! command -v docker-compose &> /dev/null
            then
              echo "Docker Compose not found, installing Docker Compose..."
              sudo curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
              sudo chmod +x /usr/local/bin/docker-compose
            fi
          
            # Pull the latest Docker images
            docker pull ${{ secrets.DOCKER_USERNAME }}/frontend:latest
            docker pull ${{ secrets.DOCKER_USERNAME }}/backend:latest
          
            # Navigate to the project directory (or change if necessary)
            cd /path/to/your/project
          
            # If necessary, stop and remove old containers
            docker-compose down
          
            # Bring up the containers (start the app)
            docker-compose up -d
          EOF

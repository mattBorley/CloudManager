name: CI/CD

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  source:
    runs-on: ubuntu-latest
    steps:
      # Checkout the code
      - name: Checkout code
        uses: actions/checkout@v4

      # Set up Node.js for linting the React frontend
      - name: Set up Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      # Install dependencies and run linting for React
      - name: Install dependencies and lint React
        run: |
          cd frontend
          npm install

      # Set up Python for linting the FastAPI backend
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.13'

      - name: Install build tools
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential python3-dev

      # Install dependencies and run linting for FastAPI
      - name: Install dependencies and lint FastAPI
        run: |
          cd backend
          pip install -r requirements.txt
          pylint $(git ls-files '*.py') --output=lint.txt || true

#  test:
#    runs-on: ubuntu-latest
#    needs: source
#    steps:
#      # Checkout the code
#      - name: Checkout code
#        uses: actions/checkout@v3
#
#      # Run React frontend tests
#      - name: Run React tests
#        run: |
#          cd frontend
#          npm install
#          npm test -- --ci --silent --maxWorkers=1
#
#      # Run FastAPI backend tests
#      - name: Run FastAPI tests
#        run: |
#          cd backend
#          pip install -r requirements.txt
#          pytest

  build:
    runs-on: ubuntu-latest
    needs: source
    steps:
      # Checkout the code
      - name: Checkout code
        uses: actions/checkout@v3

      # Log in to Docker Hub or another Docker registry
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Build and push Docker image for frontend
      - name: Build and push React frontend Docker image
        run: |
          cd frontend
          docker build -t ${{ secrets.DOCKER_USERNAME }}/frontend:latest .
          docker push ${{ secrets.DOCKER_USERNAME }}/frontend:latest

      # Build and push Docker image for backend
      - name: Build and push FastAPI backend Docker image
        run: |
          cd backend
          docker build -t ${{ secrets.DOCKER_USERNAME }}/backend:latest .
          docker push ${{ secrets.DOCKER_USERNAME }}/backend:latest

  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      # Checkout the repository (to get the CI/CD workflow itself)
      - name: Checkout repository
        uses: actions/checkout@v4

      # Set up SSH private key to access the VM
      - name: Set up SSH private key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.VMPRIVATEKEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.VM_IP }} >> ~/.ssh/known_hosts

      # Upload GitHub Deploy Key to VM and configure SSH
      - name: Upload GitHub Deploy Key to VM
        run: |
          echo "${{ secrets.VM_DEPLOY_KEY }}" > github_deploy_key
          scp -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no github_deploy_key ${{ secrets.VM_USERNAME }}@${{ secrets.VM_IP }}:/home/${{ secrets.VM_USERNAME }}/.ssh/github_deploy_key
          ssh -i ~/.ssh/id_rsa ${{ secrets.VM_USERNAME }}@${{ secrets.VM_IP }} << 'EOF'
            chmod 600 ~/.ssh/github_deploy_key
            echo "Host github.com" >> ~/.ssh/config
            echo "  IdentityFile ~/.ssh/github_deploy_key" >> ~/.ssh/config
            echo "  StrictHostKeyChecking no" >> ~/.ssh/config
          EOF

      # Check Docker Installation
      - name: Check Docker Installation
        run: |
          ssh -T -i ~/.ssh/id_rsa ${{ secrets.VM_USERNAME }}@${{ secrets.VM_IP }} << 'EOF'
          if ! command -v docker &> /dev/null
          then
            echo "Docker not found, installing Docker..."
            curl -fsSL https://get.docker.com -o get-docker.sh
            sudo sh get-docker.sh
            sudo usermod -aG docker ${{ secrets.VM_USERNAME }}
          fi
          EOF

      # Check Docker Compose Installation
      - name: Check Docker Compose Installation
        run: |
          ssh -T -i ~/.ssh/id_rsa ${{ secrets.VM_USERNAME }}@${{ secrets.VM_IP }} << 'EOF'
          if ! command -v docker-compose &> /dev/null
          then
            echo "Docker Compose not found, installing Docker Compose..."
            sudo curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
            sudo chmod +x /usr/local/bin/docker-compose
          fi
          EOF

      # Clone or Pull the Repo on the VM
      - name: Pull Repo from Git
        run: |
          ssh -T -i ~/.ssh/id_rsa ${{ secrets.VM_USERNAME }}@${{ secrets.VM_IP }} << 'EOF'
          if [ ! -d "/home/${{ secrets.VM_USERNAME }}/cloudmanager" ]; then
            git clone git@github.com:YOUR_USERNAME/YOUR_REPO.git /home/${{ secrets.VM_USERNAME }}/cloudmanager
          else
            cd /home/${{ secrets.VM_USERNAME }}/cloudmanager
            git pull origin main
          fi
          EOF

      # Pull Docker Images
      - name: Pull Docker Images from Registry
        run: |
          ssh -T -i ~/.ssh/id_rsa ${{ secrets.VM_USERNAME }}@${{ secrets.VM_IP }} << 'EOF'
          sudo docker pull ${{ secrets.DOCKER_USERNAME }}/frontend:latest
          sudo docker pull ${{ secrets.DOCKER_USERNAME }}/backend:latest
          EOF

      # Deploy the Application
      - name: Deploy App
        run: |
          ssh -T -i ~/.ssh/id_rsa ${{ secrets.VM_USERNAME }}@${{ secrets.VM_IP }} << 'EOF'
          cd /home/${{ secrets.VM_USERNAME }}/cloudmanager
          sudo docker-compose -f docker-compose.prod.yml down --remove-orphans
          sudo docker-compose -f docker-compose.prod.yml up -d
          docker exec backend alembic upgrade head
          EOF
